// -------------- globals

// Authorization token that must have been created previously. See : https://developer.spotify.com/documentation/web-api/concepts/authorization
const _token = 'BQCZBwRvWjnFyGnTEqa0SsRV7FM5N1FOCFtKuV2DPsrYr_4ktkO0mrvZK5tP3MY3vP-YPwA-4cjn1l5zKjxhrpmDjMl-NtcnZhV1y7xx0k-ohdgOuoDDHL5y5-6Svwm1ai8xE-nroGUhyiV-JSZQuO1_hkLr2-E3dbbgY_RD4g8Imi2GVSO_zFBnidILFSbfCSmsSCyPzqrdmIFhfJcpJk-gtVVbWE6fTRa50skJ0YE1TZbcVOCHYWC_Q0nHzZ8FOUA';

var _user_and_prefixes = {
  'marczoid': ['marcmix '],
  'joost_johnas': ['boys ', 'de boys gaan wat beleven', 'siem en marc gaan wat beleven'],
  'lilapause': ['de krochten'],
  'reneesteinmann': ['beste discover weekly', 'siems toppertjes'],
}

// This should point to a web address with a JSON containing all playlists
// generated by get_playlists.html.
_playlists_path = 'https://raw.githubusercontent.com/marcvanzee/spotify-playlist-analysis/main/playlists.json'

_playlists = {}

// -------------- functions

function setHtml(fieldId, text) {
  document.getElementById(fieldId).innerHTML = text
}

function initGetPlaylists() {
  html = 'Using the following usernames and playlist prefixes:<br>';
  html += '<ul>';
  for (const [user, prefixes] of Object.entries(_user_and_prefixes)) {
    html += `<li><b>${user}</b>: "` + prefixes.join('", "') + '"</li>';
  }
  html += '</ul>'
  setHtml('settings', html)
}

function initAnalyzePlaylist() {

  function addOption(select_field, text, id) {
    const option = document.createElement('option');
    option.text = text;
    option.id = id
    select_field.add(option, select_field[-1]);
  }

  function addCheckboxWithLabel(container, text, id) {
    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.id = id;
    checkbox.name = text;
    checkbox.checked = true;
    container.appendChild(checkbox);

    const label = document.createElement('label');
    label.setAttribute('for', id);
    label.innerHTML = text;
    container.appendChild(label);
  }

  fetch(_playlists_path)
    .then((response) => response.json())
    .then((json) => {
      html = `Successfully retrieved ${json.length} playlists from
              <a href="${_playlists_path}">${_playlists_path}</a>, which is
              generated using <a href="get_playlists.html">get_playlists.html</a>`
      setHtml('status', html)
      document.getElementById('analyze-content').style.display = 'inline';
      const select = document.getElementById('playlist-selector');
      const fieldset = document.getElementById('other-playlists');
      Object.values(json).map((playlist) => {
        const name = `${playlist.name} by ${playlist.user}`
        addOption(select, name, playlist.id);
        const div = document.createElement('div');
        addCheckboxWithLabel(div, name, playlist.id);
        fieldset.appendChild(div);
      });
      _playlists = json;
    })
}


async function fetchWebApi(endpoint, method, body) {
  const res = await fetch(`https://api.spotify.com/${endpoint}`, {
    headers: {
      Authorization: `Bearer ${_token}`,
    },
    method,
    body:JSON.stringify(body)
  });
  return await res.json();
}

async function getIterative(url, filter_fn = (x) => x) {
  let result = []
  let offset = 0
  while (true) {
    const new_result = (await fetchWebApi(
      `${url}?limit=50&offset=${offset}`, 'GET'
    )).items.filter(filter_fn);
    if (new_result && new_result.length) {
      result = result.concat(new_result);
      offset += 50;
    } else {
      break;
    }
  }
  return result;
}

async function getPlaylistTracks(playlist_id) {
  tracks = await getIterative(
      `v1/playlists/${playlist_id}/tracks`)
  tracks = tracks.map(({track}) => ({
    'artist': track.artists.map((artist) => artist.name).join('_'),
    'name': track.name,
  }))
  return tracks
}

async function getPlaylists(user) {
  function keep_playlist_fn(playlist) {
    prefixes = _user_and_prefixes[user];
    return prefixes.some(prefix => playlist.name.toLowerCase().startsWith(prefix))
  }

  async function process_playlist(playlist) {
    tracks = await getPlaylistTracks(playlist.id);
    return {
      'id': playlist.id,
      'name': playlist.name,
      'url': playlist.external_urls['spotify'],
      'user': user,
      'tracks': tracks,
    }
  }
  playlists = await Promise.all((await getIterative(
      `v1/users/${user}/playlists`,
      keep_playlist_fn)).map(process_playlist))

  return playlists;
}

function writePlaylists(playlists) {
  // Write as dictionary keyed by playlist id.
  playlists = Object.fromEntries(playlists.map(p => [p.id, p]));

  var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(playlists, null, '  '));
  var dlAnchorElem = document.getElementById('download');
  dlAnchorElem.setAttribute("href", dataStr);
  dlAnchorElem.setAttribute("download", "playlists.json");
  dlAnchorElem.style.display = "inline";
}

async function getAllPlaylists() {
  setHtml('status', '<i>Retrieving playlists...</i>');

  all_playlists = []
  for (const user in _user_and_prefixes) {
    setHtml('status', `<i>Getting playlists for ${user}...</i>`);
    playlists = await getPlaylists(user);
    all_playlists = all_playlists.concat(playlists);
  }
  setHtml('status', `<i>Done, found ${all_playlists.length} playlists!</i>`);
  console.log('all playlists', all_playlists);

  writePlaylists(all_playlists);
}

async function analyzePlaylist() {
  console.log(_playlists)

  const options = document.getElementById('playlist-selector').options;
  const playlist = _playlists[options[options.selectedIndex].id];

  html = `<h2>Analysis of ${playlist.name} by ${playlist.user}`;

  const num_tracks = playlist.tracks.total;

  artists_count = {}
  for (const t of playlist.tracks) {
    artist = t.track.artists.map((artist) => artist.name).join('_');
    if (artist in artists_count) {
      artists_count[artist]++;
    } else {
      artists_count[artist] = 1;
    }
  }

  artists_count = Object.fromEntries(Object.entries(artists_count).filter(([k,v]) => v>1));

  console.log('total tracks', num_tracks)
  console.log(artists_count);
}